/*

*/
// Define variables that we'll set values to later on
// We only need to define the vars we'll use across stages
def settings
def projectInfo
// This is an array we'll use for dynamic parallization
def repos = [:]
def githubUrl = "https://github.example.com/api/v3"
//def githubUrl = "https://api.github.com/"

/*
node {
  // useful debugging info 
  echo sh(returnStdout: true, script: 'env')
}
*/

pipeline {
  // This can run on any agent... we can lock it down to a 
  // particular node if we have multiple nodes, but we won't here
  agent any
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'event', value: '$.webhookEvent'],
        [key: 'version', value: '$.version'],
        [key: 'projectId', value: '$.version.projectId'],
        [key: 'name', value: '$.version.name'],
        [key: 'description', value: '$.version.description']
      ],

      causeString: 'Triggered on $ref',
      // This token is arbitrary, but is used to trigger this pipeline.
      // Without a token, ALL pipelines that use the Generic Webhook Trigger
      // plugin will trigger 
      token: '6BE4BF6E-A319-40A8-8FE9-D82AE08ABD03',
      printContributedVariables: true,
      printPostContent: true,
      silentResponse: false,
      regexpFilterText: '',
      regexpFilterExpression: ''
    )
  }
  stages {
    // We'll read our settings in this step
    stage('Get our settings') {
      steps {
        script {
          try {
            settings = readYaml(file: '.github/jira-workflow.yml')
            //sh("echo ${settings.project}")
          } catch(err) {
            echo "Please create .github/jira-workflow.yml"
            throw err
            //currentBuild.result = 'ABORTED'
            //return
            //currentBuild.rawBuild.result = Result.ABORTED //This method requires in-process script approval, but is nicer than what's running currently
          }
        }
      }
    }
    stage('Get project info') {
      steps {
        script {
          //  echo projectId
          projectInfo = jiraGetProject(idOrKey: projectId, site: 'Jira')
          //  echo projectInfo.data.name.toString()
        }
      }
    }
    stage('Create Release Branches') {
      when {
        // Let's only run this stage when we have a 'version created' event
        expression { event == 'jira:version_created' }
      }
      steps {
        script {
          // Specify our credentials to use for the steps
          withCredentials([usernamePassword(credentialsId: '<github_credentials_id>', 
                              passwordVariable: 'githubToken', 
                              usernameVariable: 'githubUser')]) {
            // Loop through our list of Projects in Jira, which will map to Orgs in GitHub.
            // We're assigning it 'p' since 'project' is assigned as part of the YAML structure
            settings.project.each { p ->
              // Only apply this release to the proper Org
              if (p.name.toString() == projectInfo.data.name.toString()) {
                // Loop through each repo in the Org
                p.repos.each { repo ->
                  // Create an array that we will use to dynamically parallelize the 
                  // actions with. 
                  repos[repo] = {
                    node {
                      // Get the master refs to create the branches from
                      httpRequest(
                        contentType: 'APPLICATION_JSON',
                        consoleLogResponseBody: true,
                        customHeaders: [[maskValue: true, name: 'Authorization', value: "token ${githubToken}"]],
                        httpMode: 'GET',
                        outputFile: "${p.org}_${repo}_master_refs.json",
                        url: "${githubUrl}/repos/${p.org}/${repo}/git/refs/heads/master")
                      // Create a variable with the values from the GET response
                      masterRefs = readJSON(file: "${p.org}_${repo}_master_refs.json")
                      // Define the payload for the GitHub API call
                      payload = """{
                        "ref": "refs/heads/${name}",
                        "sha": "${masterRefs['object']['sha']}"
                      }"""
                      // Create the new branches
                      httpRequest(
                        contentType: 'APPLICATION_JSON',
                        consoleLogResponseBody: true,
                        customHeaders: [[maskValue: true, name: 'Authorization', value: "token ${githubToken}"]],
                        httpMode: 'POST',
                        ignoreSslErrors: false,
                        requestBody: payload,
                        responseHandle: 'NONE',
                        url: "${githubUrl}/repos/${p.org}/${repo}/git/refs")
                    }
                  }
                }
                // Execute the API calls simultaneously for each repo in the Org
                parallel repos
              }
            }
          }
        }
      }
    }
    stage('Create Release') {
      when {
        // Let's only run this stage when we have a 'version created' event
        expression { event == 'jira:version_released' }
      }
      steps {
        script {
          // Specify our credentials to use for the steps
          withCredentials([usernamePassword(credentialsId: '<github_credentials_id>', 
                              passwordVariable: 'githubToken', 
                              usernameVariable: 'githubUser')]) {
            // Loop through our list of Projects in Jira, which will map to Orgs in GitHub.
            // We're assigning it 'p' since 'project' is assigned as part of the YAML structure
            settings.project.each { p ->
              // Only apply this release to the proper Org
              if (p.name.toString() == projectInfo.data.name.toString()) {
                // Loop through each repo in the Org
                p.repos.each { repo ->
                  // Create an array that we will use to dynamically parallelize the actions with. 
                  repos[repo] = {
                    node {
                      // Get the current releases
                      httpRequest(
                        contentType: 'APPLICATION_JSON',
                        consoleLogResponseBody: true,
                        customHeaders: [[maskValue: true, name: 'Authorization', value: "token ${githubToken}"]],
                        httpMode: 'GET',
                        outputFile: "${p.org}_${repo}_releases.json",
                        url: "${githubUrl}/repos/${p.org}/${repo}/releases")
                      // Create a variable with the values from the GET response
                      releases = readJSON(file: "${p.org}_${repo}_releases.json")
                      // Define the payload for the GitHub API call
                      def payload = """{
                        "tag_name": "${name}",
                        "target_commitish": "${name}",
                        "name": "${name}",
                        "body": "${description}",
                        "draft": false,
                        "prerelease": false
                      }"""
                      // Create the new release
                      httpRequest(
                        contentType: 'APPLICATION_JSON',
                        consoleLogResponseBody: true,
                        customHeaders: [[maskValue: true, name: 'Authorization', value: "token ${githubToken}"]],
                        httpMode: 'POST',
                        ignoreSslErrors: false,
                        requestBody: payload,
                        responseHandle: 'NONE',
                        url: "${githubUrl}/repos/${p.org}/${repo}/releases")
                    }
                  }
                }
                // Execute the API calls simultaneously for each repo in the Org
                parallel repos
              }
            }
          }
        }
      }
    }
  }
}
